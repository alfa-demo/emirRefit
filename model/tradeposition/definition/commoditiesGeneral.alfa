namespace ALFABANK.Regulatory.Model

# Section 2j - Commodities and emission allowances (General) derivative
record commoditiesGeneral includes derivativesTradeReport {
    /# Field 2.116 ## Base product as specified in the classification of commodities in Table 4 of Annex I of the [ITS].#/
    @fieldClassification(Classification= fieldClassificationType.Other)
    baseProduct : BaseProductType

    /# Field 2.117 ## Sub ## product as specified in the classification of commodities in Table 4 of Annex I of the [ITS]
       This field requires a specific base product in field.#/
    @fieldClassification(Classification= fieldClassificationType.Other)   
    subProduct : SubProductType

    /# Field 2.118 ## Further Sub ## product as specified in the classification of commodities in Table 4 of Annex I of the [ITS]
       This field requires a specific base product in field.#/
    @fieldClassification(Classification= fieldClassificationType.Other)   
    furtherSubProduct : FurtherSubProductType
}

fragment record commoditiesGeneral {
    # Re-usable rule to validate classification of commodities
    assert CheckClassificationHierarchy {

        // Build a hierarchy of baseProduct -> subProduct -> furtherSubProduct based on the enum naming
        let hierarchy : map< string, map< string, set< string  > > > =
                toMap( toList(enumValues( BaseProductType )),
                       k1 => k1,
                       k1 => toMap< map< string, set< string  > > >( toList(enumValues( "Model." + k1 + "_SubProductType" )),
                                    k2 => k2,
                                    k2 => enumValues( "Model." + k1 + "_" + k2 + "_FurtherSubProductType" )
                                  )
                     )

         // Check if the sub-product is defined under the base product
         let subProdsMap = get ( get( hierarchy, toString( baseProduct ) ) )
         if ( ! contains( keys( subProdsMap ), toString(subProduct) ) )
             raise warning("EMIR-VR-NNN, 'Invalid sub-product ${subProduct} for base type ${baseProduct}' ")

         // Check if the sub-product is defined under the further-sub-product
         let furtherSubProdsSet = get( get( subProdsMap, toString( furtherSubProduct ) ) )
         if ( ! contains( furtherSubProdsSet, toString(furtherSubProduct) ) )
             raise warning("EMIR-VR-NNN, 'Invalid further-sub-product ${furtherSubProduct} for sub product ${baseProduct}' ")
    }
}

# All commodities classification base types 
enum BaseProductType {
    METL
}

# An aggregate of all Sub-Product types
enum SubProductType includes METL_SubProductType { }

# An aggregate of all Further-Sub-Product types
enum FurtherSubProductType includes METL_FurtherSubProductType { }

enum METL_SubProductType {
    NPRM, PRME
}

# An aggregate of Metal Further-Sub-Product types
enum METL_FurtherSubProductType includes METL_NPRM_FurtherSubProductType, METL_PRME_FurtherSubProductType {

}

# Metal non-precious product types
enum METL_NPRM_FurtherSubProductType {
    ALUM ## Aluminium
    ALUA ## Aluminium Alloy
    CBLT ## Cobalt
    COPR ## Copper
    IRON ## Iron ore
    LEAD ## Lead
    MOLY ## Molybdenum
    NASC ## NASAAC
    NICK ## Nickel
    STEL ## Steel
    TINN ## Tin
    ZINC ## Zinc
    OTHR ## Other
} 

# Metal precious product types
enum METL_PRME_FurtherSubProductType {
    GOLD ## Gold
    SLVR ## Silver
    PTNM ## Platinum
    PLDM ## Palladium
   // OTHR ## Other
}

