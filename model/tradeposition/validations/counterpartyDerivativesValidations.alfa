namespace ALFABANK.Regulatory.Model
 
fragment record derivativesTradeReport {
    /#
    1. Common input format: YYYY-MM-DDThh:MM:SSZ
    2. The reporting timestamp should be equal or earlier than the timestamp of the receipt of the report by the TR. 
    3. The date part of the timestamp cannot be earlier than the day preceding the date of the receipt of the report by the TR. The receipt of the report should be understood as the moment the report enters a TRâ€™s system.
    4. The reporting timestamp should be equal or later than the execution timestamp reported in the field 2.42.
    5. The reporting timestamp should be equal or later than 2024-04-29.
     #/
    assert reportingTimestamp {
        if ( reportingTimestamp < get(executionTimestamp))  
            raise error ("EMIR-VR-1001-04, 'reporting timestamp should be equal or later than the execution timestamp.")
    }
    /# 
    1. For action types 'NEWT', 'MODI', 'VALU', 'CORR', 'REVI' and 'POSC': this field shall contain a valid LEI included in the GLEIF database maintained by the Central Operating Unit. 
    2. The status of the LEI for all the above action types shall be "Issued", "Lapsed", "Pending transfer" or "Pending archival".
    3. For action types 'TERM' and 'EROR': This field shall contain an LEI included in the GLEIF database maintained by the Central Operating Unit, irrespective of the registration status of that LEI.
    4. The LEI shall pertain to a legal entity and not a branch. Correct status of the LEI should be verified as of the date reported in the field 1.1 Reporting timestamp.
    #/
    assert reportSubmittingEntityId {
        let actionTypes = { ActionType.NEWT, ActionType.MODI, ActionType.VALU, ActionType.CORR, ActionType.REVI, ActionType.POSC }

        if ( contains( actionTypes, actionType ))
            debug("check in the GLEIF database")

        // ...
    }
    /# Field 1.5 Validation #/
    assert natureOfCounterparty1 {
        let actionTypes = { ActionType.NEWT, ActionType.MODI, ActionType.CORR, ActionType.REVI, ActionType.POSC }

        if ( contains( actionTypes, actionType)  && isNone( natureOfCounterparty1 ) )
            raise error ("EMIR-VR-1005-01, this field is mandatory for action types 'NEWT', 'MODI','CORR', 'REVI', and 'POSC" )
    }
    /# Field 1.6 Validation
        1. if action type is populated with 'VALU','TERM','EROR' the field shall be left blank
        2. If field 1.5 is populated with 'F', at least one code pertaining to the classification of the financial counterparties (INVF,CDTI,INUN,UCIT,ORPI,AIFD) shall be provided.
        3. If field 1.5 is populated with 'N', at least one code pertaining to the classification of the non-financial counterparties (A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,T,U) shall be provided.
        4. If field 1.5 is populated with 'C' or 'O', this field shall be left blank.#/
    assert corporateSectorOfCounterparty1 {
        # Check if the field should be blank depending action-type
        ActionTypeCheck::shouldFieldBeBlank(actionType, "corporateSectorOfCounterparty1", isSome( corporateSectorOfCounterparty1 ) )

        # Create list of financials
        let financials = {CorpSectorType.INVF, CorpSectorType.CDTI, CorpSectorType.INUN, CorpSectorType.UCIT, CorpSectorType.ORPI, CorpSectorType.AIFD }
        
        # Create list of non-financials
        let nonfinancials = {CorpSectorType.A, CorpSectorType.B, CorpSectorType.C, CorpSectorType.D, CorpSectorType.E, CorpSectorType.F, CorpSectorType.G, 
                             CorpSectorType.H, CorpSectorType.I, CorpSectorType.J, CorpSectorType.K, CorpSectorType.L, CorpSectorType.M, CorpSectorType.N, 
                             CorpSectorType.O, CorpSectorType.P, CorpSectorType.Q, CorpSectorType.T, CorpSectorType.U
                            }

        # When natureOfCounterparty1 is N check corporate sector is non-financial 
        if ( isSome(natureOfCounterparty1) && get(natureOfCounterparty1) == NatureOfCounterpartyType.N && 
             !isSome(corporateSectorOfCounterparty1) && len( filter( get(corporateSectorOfCounterparty1), e => contains(nonfinancials, e ) ) ) == 0 ) 
            # Error - corporateSectorOfCounterparty1 needs a non-financial sector classification
            raise error ("EMIR-VR-ZZZ, If natureOfCounterparty1 is populated with 'N', at least one code pertaining to the classification of the non-financial counterparties" )

        # When natureOfCounterparty1 is F check corporate sector is financial 
        if ( isSome(natureOfCounterparty1) && get(natureOfCounterparty1) == NatureOfCounterpartyType.F && 
             !isSome(corporateSectorOfCounterparty1) && len( filter( get(corporateSectorOfCounterparty1), e => contains(financials, e ) ) ) == 0 ) 
            # Error - corporateSectorOfCounterparty1 needs a financial sector classification
            raise error ("EMIR-VR-ZZZ, If natureOfCounterparty1 is populated with 'F', at least one code pertaining to the classification of the financial counterparties" )

        # When natureOfCounterparty1 is O or C check corporate sector is blank 
        if ( isSome(natureOfCounterparty1) && isSome(corporateSectorOfCounterparty1) && 
             contains( { NatureOfCounterpartyType.C, NatureOfCounterpartyType.O }, get(natureOfCounterparty1) ) )
            # Error - corporateSectorOfCounterparty1 should be blank 
            raise error ("EMIR-VR-ZZZ, If natureOfCounterparty1 is populated with 'C' or 'O', this field shall be left blank" )
    }

    /# Field 1.7 Validation
        1. If field 1.5 is populated with 'N' or 'F', this field shall be populated and shall contain only one of the following values: 'TRUE' or 'FALSE'. 
        2. If field 1.5 is populated with 'C' or 'O', this field shall be left blank.#/
    assert clearingThresholdOfCounterparty1 {

    }
    /# Field 1.9 Validaton
        6. Fields 1.4 and 1.9 cannot contain the same LEI, unless this corresponds to the LEI of the CCP under field 2.33.
        7. If field 1.8 is populated with 'FALSE', this field shall contain up to 72 alphanumeric characters. 
        8. For action types 'NEWT' and 'POSC', the first 20 characters of the client code should be equal to the LEI reported in the field 1.4 Counterparty 1 (Reporting counterparty)
        9. The value populated in this field when the trade is reported for the first time, shall not be modified in the subsequent reports.#/
    assert counterparty2 {

    }

    /# Field 1.10 Validation
        0. if action type is populated with 'VALU','TERM','EROR' the field shall be left blank
        1. If field 1.8 is populated with 'FALSE', this field shall be populated and shall contain 2 alphabetical characters
        2. If field 1.8 is populated with 'TRUE', this field shall be left blank #/
    assert countryOfCounterparty2 {
        ActionTypeCheck::shouldFieldBeBlank(actionType, "countryOfCounterparty2", isSome( countryOfCounterparty2 ) )
    }

    /# Field 1.11 Validation
        0. if action type is populated with 'VALU','TERM','EROR' the field shall be left blank
        1. If field 1.8 is populated with 'TRUE', this field shall be populated and shall contain only one of the following values: 'F', 'N', 'C' or 'O'. 1 alphabetical character.
        2. If field 1.8 is populated with 'FALSE', this field shall be left blank. #/
    assert natureOfCounterparty2 {
        ActionTypeCheck::shouldFieldBeBlank(actionType, "natureOfCounterparty2", isSome( natureOfCounterparty2 ) )
    }

    /# Field 1.12 Validation
        0. if action type is populated with 'VALU','TERM','EROR' the field shall be left blank
        1. If field 1.11 is populated with 'F', at least one code pertaining to the classification of the financial counterparties shall be provided.
        2. If field 1.11 is populated with 'N', at least one code pertaining to the classification of the non-financial counterparties shall be provided.
        3. If field 1.11 is populated with 'C' ,  'O' or is blank, this field shall be left blank. #/
    assert corporateSectorOfCounterparty2 {
        ActionTypeCheck::shouldFieldBeBlank(actionType, "corporateSectorOfCounterparty2", isSome( corporateSectorOfCounterparty2 ) )
    }

    /# Field 1.13 Validation
        0. if action type is populated with 'VALU','TERM','EROR' the field shall be left blank
        1. If field 1.11 is populated with 'N' or 'F', this field shall be populated and shall contain only one of the following values: 'TRUE' or 'FALSE'. 
        2. If field 1.11 is populated with 'C', 'O' or is blank, this field shall be left blank. #/
    assert clearingThresholdOfCounterparty2 {
        ActionTypeCheck::shouldFieldBeBlank(actionType, "clearingThresholdOfCounterparty2", isSome( clearingThresholdOfCounterparty2 ) )
    }

    /# Field 1.14 Validation
        0. if action type is populated with 'VALU','TERM','EROR' the field shall be left blank
        1. This field shall contain only one of the following values: 'TRUE' or 'FALSE'. think this is sorted by boolean?
        2. If the field 1.8 is populated with 'FALSE' , this field shall be populated with 'FALSE'. #/
    assert reportingObligationOfCounterparty2 {
        ActionTypeCheck::shouldFieldBeBlank(actionType, "reportingObligationOfCounterparty2", isSome( reportingObligationOfCounterparty2 ) )
    }

    /# Field 1.15 Validation
       0. if action type is populated with 'VALU','TERM','EROR' the field shall be left blank #/
    assert brokerId {
        ActionTypeCheck::shouldFieldBeBlank(actionType, "brokerId", isSome( brokerId ) )
    }

    /# Field 1.16 Validation
        0. if action type is populated with 'VALU','TERM','EROR' the field shall be left blank
        1. If field 2.31 is populated with 'Y' this field shall be populated.
        2. When populated, shall contain a valid LEI included in the GLEIF database maintained by the Central Operating Unit. 
        3. The status of the LEI shall be "Issued", "Lapsed", "Pending transfer" or "Pending archival".
        Correct status of the LEI should be verified as of the date reported in the field 1.1 Reporting timestamp. Validation of the status should not be applied if 2.153 Event date is earlier than the day preceding the date reported in 1.1 Reporting timestamp. 
        4. The LEI shall pertain to a legal entity and not a branch.
        5. If field 2.31 is populated with 'N', this field shall be left blank.
        6. Fields 1.16 and 2.33 cannot contain the same LEI #/
    assert clearingMember {
        ActionTypeCheck::shouldFieldBeBlank(actionType, "clearingMember", isSome( clearingMember ) )
    }

    /# Field 1.17 Validation
        0. if action type is populated with 'VALU','TERM','EROR' the field shall be left blank
        1. Either field 1.17 or both fields 1.18 and 1.19 shall be populated.
        2. If populated, this field shall contain only one of the following values: 'BYER' or 'SLLR'. 4 alphabetical characters. #/
    assert direction {
        ActionTypeCheck::shouldFieldBeBlank(actionType, "direction", isSome( direction ) )
    }

    /# Field 1.18 Validation
        0. if action type is populated with 'VALU','TERM','EROR' the field shall be left blank
        1. Either field 1.17 or both fields 1.18 and 1.19 shall be populated.
        2. If populated, this field shall contain only one of the following values: 'MAKE' or 'TAKE'. 4 alphabetical characters. 
        3. If populated, this field shall contain a different value than field 1.19. #/
    assert directionOfLeg1 {
        ActionTypeCheck::shouldFieldBeBlank(actionType, "directionOfLeg1", isSome( directionOfLeg1 ) )
    }

    /# Field 1.19 Validation
        0. if action type is populated with 'VALU','TERM','EROR' the field shall be left blank
        1. Either field 1.17 or both fields 1.18 and 1.19 shall be populated.
        2. If populated, this field shall contain only one of the following values: 'MAK'E or 'TAKE'. 4 alphabetical characters. 
        3. If populated, this field shall contain a different value than field 1.18. #/
    assert directionOfLeg2 {
        ActionTypeCheck::shouldFieldBeBlank(actionType, "directionOfLeg2", isSome( directionOfLeg2 ) )
    }

    /# Field 2.1 Validation
        0. if action type is populated with 'VALU','TERM','EROR' the field shall be left blank
        1. If field 1.5 is populated with 'N' and field 2.154 (Level) is populated with 'TCTN', this field shall be populated and shall contain 
        only one of the following values: 'TRUE' or 'FALSE'. 
        2. If field 1.5 is populated with 'F', 'C' or 'O' or if field 2.154 is populated with 'PSTN', this field shall be left blank. #/
    assert directlyLinkedToCommercialActivityOrTreasuryFinancing {
        ActionTypeCheck::shouldFieldBeBlank(actionType, "directlyLinkedToCommercialActivityOrTreasuryFinancing", isSome( directlyLinkedToCommercialActivityOrTreasuryFinancing ) )
    }

    /# Field 2.2 Validation
        0. if action type is populated with 'VALU','TERM','EROR' the field shall be left blank
        00. if level is populated with 'PSTN' the field shall be left blank
        1. If field 2.41 is populated with a MIC pertaining to a trading venue, this field shall  be populated and shall contain up to 52 alphanumerical characters where any character is allowed. 
        2. The code reported in this field shall be different from the codes reported in fields 2.1, 2.3 or 2.4.
        3. If field 2.41 is populated with a MIC that does not pertain to a trading venue (including XXXX and XOFF), this field shall be left blank. #/
    assert  reportTrackingNumber {
        ActionTypeCheck::shouldFieldBeBlank(actionType, "reportTrackingNumber", isSome( reportTrackingNumber ) )
    }

    /# Field 2.3 Validation
        0. if action type is populated with 'VALU','TERM','EROR' the field shall be left blank
        1. For action type 'NEWT': If field 2.152 is populated with 'NOVA', 'EXER' or 'ALOC', this field shall be populated.
        2. For action type 'NEWT': If field 2.152 is populated with  'CLRG' or 'CORP', this field is optional.
        3. For action type 'NEWT' and other event types this field shall be left blank.
        4. When populated, this field shall contain up to 52 alphanumerical characters. Four special characters are allowed ":", ".",  "-", " _" .  Special characters not allowed at the beginning or the end. 
        5. The code reported in this field shall be different from the codes reported in fields 2.1, 2.2 or 2.4. #/
    assert priorUti {
        ActionTypeCheck::shouldFieldBeBlank(actionType, "priorUti", isSome( priorUti ) )
    }

    /# Field 2.4 Validation
        0. if action type is populated with 'POSC" the field shall be populated (mandatory)
        For action type 'TERM':
        1. If field 2.152 is populated with 'INCP', this field shall be populated.
        2. If field 2.152 is populated with value other than 'INCP', this field is optional.
        3. When populated, this field shall contain up to 52 alphanumerical characters. Four special characters are allowed ":", ".",  "-", " _" .  Special characters not allowed at the beginning or the end. 
        4. The code reported in this field shall be different from the codes reported in fields 2.1, 2.2 or 2.3. #/
    assert subsequentPositionUti {

    }

    /# Field 2.5 Validation
        0. if action type is populated with 'VALU','TERM','EROR' the field shall be left blank
        For action types 'NEWT', 'MODI' and 'TERM': 
        1. If field 2.152 is populated with 'COMP' and field 2.39 is populated with 'PWAS', 'PRBM' or 'OTHR', this field shall be populated.   
        2. If field 2.152 is populated with 'COMP' and field 2.39 is populated with 'PWOS', or if field 2.152 is not populated with 'COMP',  this field shall be left blank.
        3. When populated, this field shall contain up to 52 alphanumerical characters where only the the upper-case alphabetic characters Aâ€“Z and the digits 0â€“9 are allowed. 
        4. The first 20 characters of the PTRR ID should be equal to the LEI reported in the field 2.40 PTRR service provider #/
    assert postTradeRiskReduction {
        ActionTypeCheck::shouldFieldBeBlank(actionType, "postTradeRiskReduction", isSome( postTradeRiskReduction ) )
    }

    /# Field 2.6 Validation
        0. if action type is populated with 'VALU','TERM','EROR' the field shall be left blank #/
    assert packageIdentifier {

    }

    /# Field 2.7 Validation
        0. if action type is populated with 'VALU','TERM','EROR' the field shall be left blank
        1. If field 2.41 is populated with a MIC of a trading venue (RM, MTF or OTF) or of a systematic internaliser or with a MIC 'XOFF', this field shall be populated. 
        2. When populated, this field shall contain 12 alphanumerical characters, including a check digit. #/
    assert internationalSecuritiesIdentificationNumber {
        ActionTypeCheck::shouldFieldBeBlank(actionType, "internationalSecuritiesIdentificationNumber", isSome( internationalSecuritiesIdentificationNumber ) )
    }

    /# Field 2.8 Validation
        1. If the field 2.7 is populated, this field shall be left blank.
        2. If the field 2.7 is blank and the field 2.41 is not populated with a MIC of a third-country organised trading platform,  this field shall be populated 
        3. If the field 2.7 is blank and the field 2.41 is populated with a MIC of a third-country organised trading platform,  this field is optional.
        4. When populated, this field shall contain a valid UPI included in the UPI database maintained by the ANNA DSB.  12 alphanumerical characters, including a check digit. #/
    assert uniqueProductIdentifier {

    }

    /# Field 2.9 Validation
        0. if action type is populated with 'VALU','TERM','EROR' the field shall be left blank else mandatory!
        1. This field shall be populated with CFI code composed of 6 characters and compliant with ISO 10962 Standard. 
        2. At least the first  2 characters of the CFI code and the character representing asset class (if applicable for a given instrument) shall be provided (ie. these characters cannot be "X",  which represents not applicable or undefined value). 
        #/
    assert productClassification {
        ActionTypeCheck::shouldFieldBeBlank(actionType, "productClassification", isSome( productClassification ) )
    }

    /# Field 2.10 Validation
         0. if action type is populated with 'VALU','TERM','EROR' the field shall be left blank else mandatory! #/
    assert contractType {
        ActionTypeCheck::shouldFieldBeBlank(actionType, "contractType", isSome( contractType ) )
    }

    /# Field 2.11 Validation
        0. if action type is populated with 'VALU','TERM','EROR' the field shall be left blank else mandatory! #/
    assert assetClass {
        ActionTypeCheck::shouldFieldBeBlank(actionType, "assetClass", isSome( assetClass ) )
    }

    /# Field 2.12 Validation
        0. if action type is populated with 'VALU','TERM','EROR' the field shall be left blank else mandatory! #/
    assert derivativeBasedOnCryptoAssets {
        ActionTypeCheck::shouldFieldBeBlank(actionType, "derivativeBasedOnCryptoAssets", isSome( derivativeBasedOnCryptoAssets ) )
    }

    /# Field 2.13 Validation
        0. if action type is populated with 'VALU','TERM','EROR' the field shall be left blank
        1. If field 2.13 is populated with "I", this field shall be populated and shall contain 12 alphanumerical including  a check digit.
        2. If field 2.13 is populated with "X", and this field is populated, it shall contain 12 alphanumerical characters including a check digit. 
        3. If field 2.13 is not populated with "I" or "X", this field shall be left blank. #/
    assert underlyingIdentificationType {
        ActionTypeCheck::shouldFieldBeBlank(actionType, "underlyingIdentificationType", isSome( underlyingIdentificationType ) )
    }

    /# Field 2.14 Validation
        0. if action type is populated with 'VALU','TERM','EROR' the field shall be left blank
        1. If field 2.13 is populated with "I", this field shall be populated and shall contain 12 alphanumerical including  a check digit.
        2. If field 2.13 is populated with "X", and this field is populated, it shall contain 12 alphanumerical characters including a check digit. 
        3. If field 2.13 is not populated with "I" or "X", this field shall be left blank. #/
    assert underlyingIdentification {
        ActionTypeCheck::shouldFieldBeBlank(actionType, "underlyingIdentification", isSome( underlyingIdentification ) )
    }

    /# Field 2.15 Validation
        0. if action type is populated with 'VALU','TERM','EROR' the field shall be left blank
        2. If field 2.13 is not populated with 'X', this field shall be left blank. #/
    assert indicatorOfTheUnderlyingIndex {
        ActionTypeCheck::shouldFieldBeBlank(actionType, "indicatorOfTheUnderlyingIndex", isSome( indicatorOfTheUnderlyingIndex ) )
    }

    /# Field 2.16 Validation
        0. if action type is populated with 'VALU','TERM','EROR' the field shall be left blank
        1. If field 2.13 is populated with 'X', this field shall be populated and shall contain up to 50 alphanumerical characters. Otherwise this field shall be left blank. #/
    assert nameOfTheUnderlyingIndex {
        ActionTypeCheck::shouldFieldBeBlank(actionType, "nameOfTheUnderlyingIndex", isSome( nameOfTheUnderlyingIndex ) )
    }

    /# Field 2.17 Validation
        0. if action type is populated with 'VALU','TERM','EROR' the field shall be left blank
        1. If field 2.13 is populated with 'B', this field shall be populated and shall contain up to 72 alphanumeric characters. 
        2. The first 20 characters of the custom basket name should be equal to an LEI code contained in GLEIF database.
        3. Otherwise this field shall be left blank. #/
    assert customBasketCode {
        ActionTypeCheck::shouldFieldBeBlank(actionType, "customBasketCode", isSome( customBasketCode ) )
    }

    /# Field 2.18 Validation
        0. if action type is populated with 'VALU','TERM','EROR' the field shall be left blank
        1. If field 2.13 is populated with 'B', this field shall be populated and shall contain 12 alphanumeric characters, including a check digit. This field is repeatable.
            Otherwise this field shall be left blank. #/
    assert identifierOfTheBasketsConstituents {
        ActionTypeCheck::shouldFieldBeBlank(actionType, "identifierOfTheBasketsConstituents", isSome( identifierOfTheBasketsConstituents ) )
    }

    /# Field 2.19 Validation
        0. if action type is populated with 'VALU','TERM','EROR' the field shall be left blank
        1. If field 2.47 is populated with 'CASH', this field shall be populated. 
        2. If field 2.47 is populated with 'OPTL', this field is optional. 
        3. When populated, this field shall contain ISO 4217 Currency Code (official list only), 3 alphabetical characters. 
        4. The following special currency codes are not allowed: â€˜XAGâ€™, â€˜XAUâ€™, â€˜XBAâ€™, â€˜XBBâ€™, â€˜XBCâ€™, â€˜XBDâ€™, â€˜XDRâ€™, â€˜XEUâ€™, â€˜XFUâ€™, â€˜XPDâ€™, â€˜XPTâ€™, â€˜XXXâ€™.
        5. If field 2.47 is populated with 'PHYS' this field shall be left blank. #/
    assert settlementCurrency1 {
        ActionTypeCheck::shouldFieldBeBlank(actionType, "settlementCurrency1", isSome( settlementCurrency1 ) )
    }

    /# Field 2.20 Validation
        0. if action type is populated with 'VALU','TERM','EROR' the field shall be left blank
        1. When populated, this field shall contain ISO 4217 Currency Code (official list only), 3 alphabetical characters.
        2. The following special currency codes are not allowed: â€˜XAGâ€™, â€˜XAUâ€™, â€˜XBAâ€™, â€˜XBBâ€™, â€˜XBCâ€™, â€˜XBDâ€™, â€˜XDRâ€™, â€˜XEUâ€™, â€˜XFUâ€™, â€˜XPDâ€™, â€˜XPTâ€™, â€˜XXXâ€™.
        3. If field 2.47 is populated with 'PHYS' this field shall be left blank #/
    assert settlementCurrency2 {
        ActionTypeCheck::shouldFieldBeBlank(actionType, "settlementCurrency2", isSome( settlementCurrency2 ) )
    }

    /# Field 2.21 Validation
        0. if action type is populated with 'VALU' the field shall be populate
        00. if action type is populated with 'MODI','TERM','EROR' the field shall be left blank #/
    assert valuationAmount {

    }

    /# Field 2.22 Validation
        0. if action type is populated with 'VALU' the field shall be populate
        00. if action type is populated with 'MODI','TERM','EROR' the field shall be left blank
        1. If field 2.21 is populated, this field shall be populated and shall contain ISO 4217 Currency Code (official list only), 3 alphabetical characters.
        2. The following special currency codes are not allowed: â€˜XAGâ€™, â€˜XAUâ€™, â€˜XBAâ€™, â€˜XBBâ€™, â€˜XBCâ€™, â€˜XBDâ€™, â€˜XDRâ€™, â€˜XEUâ€™, â€˜XFUâ€™, â€˜XPDâ€™, â€˜XPTâ€™, â€˜XXXâ€™.
        3. Otherwise, the field shall be left blank. #/
    assert valuationCurrency {

    }

    /# Field 2.23 Validation
        0. if action type is populated with 'VALU' the field shall be populate
        00. if action type is populated with 'MODI','TERM','EROR' the field shall be left blank
        1. If field 2.21 is populated, this field shall be populated in a common input format: YYYY-MM-DDThh:mm:ssZ
        2. The valuation timestamp shall be equal or later than 2014-02-12.
        3. The valuation timestamp shall be equal or later than the execution timestamp.
        4. The valuation timestamp shall not be greater than the reporting timestamp.
        5. The date part of the valuation timestamp shall not be greater than the expiration date or, where populated, the early termination date.
        6. The date part of the valuation timestamp shall be equal to 2.153 Event date.
        7. Otherwise, the field shall be left blank. #/
    assert valuationTimestamp {

    }

    /# Field 2.24 Validation
        0. if action type is populated with 'VALU' the field shall be populate
        00. if action type is populated with 'MODI','TERM','EROR' the field shall be left blank
        1. If field 2.21 is populated and field 2.31 is populated with 'Y',  this field shall be populated with 'CCPV'.
        2. If field 2.21 is populated and field 2.31 is populated with 'N', this field shall be populated with 'MTMA' or 'MTMO' . 4 alphabetical characters.
        3. Otherwise, the field shall be left blank. #/
    assert valuationMethod {

    }

    /# Field 2.25 Validation
        0. if action type is populated with 'MODI','TERM','EROR' the field shall be left blank
        1. If field 2.21 is populated, field 2.10 is populated with 'OPTN' or 'SWPT' and field 2.13 is not populated with 'B', this field shall be populated. 
        2. When populated, this field shall contain up to 25 numeric characters including up to 5 decimal places.  Otherwise this field shall be left blank.
            The decimal mark is not counted as a numeric character. If populated, it shall be represented by a dot.
        3. Any value between -1 and 1 (including -1 and 1) is allowed.
        The negative symbol, if populated, shall not be counted as a numerical character. #/
    assert delta {
        ActionTypeCheck::shouldFieldBeBlank(actionType, "delta", isSome( delta ) )
   }

    /# Field 2.26 Validation
        0. if action type is populated with 'NEWT','MODI','CORR','REVI','POSC' the field shall be populated otherwise shall be left blank #/
    assert collateralPortfolioIndicator {

    }

    /# Field 2.27 Validation
        0. if action type is populated with 'VALU','TERM','EROR' the field shall be left blank
        1. If field 2.26 is populated with 'TRUE', this field shall be populated and shall contain up to 52 alphanumerical characters. Special characters are not allowed. 
            Otherwise, the field shall be left blank. #/
    assert collateralPortfolioCode {
        ActionTypeCheck::shouldFieldBeBlank(actionType, "collateralPortfolioCode", isSome( collateralPortfolioCode ) )
    }

    /# Field 2.28 Validation
        0. if action type is populated with 'VALU','TERM','EROR' the field shall be left blank
        1. If field 2.29 is populated with 'ECNF' or 'YCNF', this field shall be populated in a common input format: YYYY-MM-DDThh:mm:ssZ.
        2. The confirmation timestamp shall be greater than or equal to the Execution timestamp.
        3. The confirmation timestamp shall not be greater than the reporting timestamp.
        4. The date part of the confirmation timestamp shall not be greater than the expiration date or, where populated, the early termination date.
        5. If field 2.29 is populated with 'NCNF', this field shall be left blank. #/
    assert confirmationTimestamp {
        ActionTypeCheck::shouldFieldBeBlank(actionType, "confirmationTimestamp", isSome( confirmationTimestamp ) )
    }

    /# Field 2.29 Validation
        0. if action type is populated with 'VALU','TERM','EROR' the field shall be left blank
        1. If field 2.41 is not populated with a MIC code of a trading venue that was a regulated market or a third-country market considered as equivalent to a regulated market at the time of the conclusion of the derivative and field 2.31 is populated with "N", this field shall be populated and shall contain only one of the following values: 'YCNF', 'NCNF' or 'ECNF'. 4 alphabetical characters.
            Otherwise this field shall be left blank. #/
    assert confirmed {
        ActionTypeCheck::shouldFieldBeBlank(actionType, "confirmed", isSome( confirmed ) )
    }

    /# Field 2.30 Validation
        0. if action type is populated with 'VALU','TERM','EROR' the field shall be left blank
        1. If field 2.41 is not populated with a MIC code of a trading venue that was a regulated market or a third-country market considered as equivalent to a regulated market at the time of the conclusion of the derivative, this field shall be populated and shall contain one of the following values 'TRUE' , 'FLSE' or 'UKWN'. 
        2. If field 2.31 is populated with 'Y', this field shall be populated with 'UKWN'. 4 alphabetical characters.
        3. Otherwise this field shall be left blank. #/
    assert clearingObligation {
        ActionTypeCheck::shouldFieldBeBlank(actionType, "clearingObligation", isSome( clearingObligation ) )
    }
}

# Library containing reusable code that can be used for common validations
library ActionTypeCheck {
    # If action type is populated with 'VALU','TERM','EROR' the field shall be left blank
    shouldFieldBeBlank( at :ActionType, fieldName : string, fieldIsSet : boolean ) : void 
    {
        let actionTypes = { ActionType.VALU, ActionType.TERM, ActionType.EROR }
        if ( contains( actionTypes, at ) && fieldIsSet )
            raise error ("EMIR-VR-ZZZ, if action type is populated with 'VALU','TERM','EROR' the field ${fieldName} should be left blank" )

    }
}
